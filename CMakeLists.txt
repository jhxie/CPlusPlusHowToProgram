# This cmake configuration is based on an existing file the author (Jiahui Xie)
# wrote for another project with some minor changes added to make it work
# properly with a modern c++ 14 codebase.
cmake_minimum_required(VERSION 3.4.3 FATAL_ERROR)
# Both languages have to be listed here due to issues in the cmake build system
# e.g. cmake will not find thread library for some unknown reason if c is not
# listed below.
project(CPlusPlusHowToProgram C CXX)

# =============================== Build Info ==================================
if(APPLE)
    # The short system name, e.g. "FreeBSD", "Darwin", "Linux", or "Windows".
    if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
        message(STATUS "Build Environment: Mac OS X")
    else()
        message(STATUS "Build Environment: Mac OS")
    endif()

elseif(WIN32)
    if(BORLAND)
        message(STATUS "Build Environment: Windows/Borland")
    elseif(CYGWIN)
        message(STATUS "Build Environment: Windows/Cygwin")
    elseif(MINGW)
        message(STATUS "Build Environment: Windows/MinGW")
    elseif(MSVC)
        message(STATUS "Build Environment: Windows/MSVC")
    elseif(WATCOM)
        message(STATUS "Build Environment: Windows/Watcom")
    endif()

elseif(UNIX)
    if(${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
        message(STATUS "Build Environment: FreeBSD")
    elseif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
        message(STATUS "Build Environment: Linux")
    endif()
endif()
# =============================== Build Info ==================================

# ============================= CMake Settings ================================
# Let the compiler export compile commands to a 'json' file; this will add
# interactive compiler diagnostics for 'YouCompleteMe' plugin of 'Vim'.
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# --------------------------- Language Standards ------------------------------
# All the targets generated by this master file requires c++14.
set(CMAKE_CXX_STANDARD 14)
# Prevent the previous one from "decaying" to previous standards;
# i.e. make the c++14 standard a requirement.
set(CMAKE_CXX_STANDARD_REQUIRED ON)
# --------------------------- Language Standards ------------------------------

# Make sure that our source directory is on the current cmake module path so
# that we can include cmake files from this directory.
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules")

if (CMAKE_VERSION VERSION_LESS 3.2)
    set(UPDATE_DISCONNECTED_IF_AVAILABLE "")
else()
    set(UPDATE_DISCONNECTED_IF_AVAILABLE "UPDATE_DISCONNECTED 1")
endif()

# ------------------------------ CMake Modules --------------------------------
# Expose the function definitions in the custom CMake modules.
include("AddExecutableList")
include("AddGraphvizTarget")
include("CTest")
include("DownloadProject")
# ------------------------------ CMake Modules --------------------------------

# --------------------------- Dependant Libraries -----------------------------
# Only 64-bit version Visual C++ on is supported on Windows.
# Reference:
# stackoverflow.com/questions/39258250/how-to-detect-if-64-bit-msvc-with-cmake
if(WIN32)
    if(NOT MSVC)
        message(
            FATAL_ERROR
            "Only Microsoft Visual C++ is supported on Windows!"
        )
    endif()

    if(NOT CMAKE_CL_64)
        message(
            FATAL_ERROR
            "Only 64-bit version generator is supported on Windows!"
        )
    endif()
endif()

# Test the existence of thread library on the system.
find_package(Threads REQUIRED)
if(UNIX)
    if(NOT CMAKE_THREAD_LIBS_INIT)
        message(FATAL_ERROR "Pthread must be supported on the system!")
    else()
        # For systems that have multiple thread libraries support,
        # select pthread as the preferred implementation to link to.
        if(NOT CMAKE_USE_PTHREADS_INIT)
            set(CMAKE_THREAD_PREFER_PTHREAD ON)
        endif()
    endif()
endif()

if(WIN32)
    if(NOT CMAKE_USE_WIN32_THREADS_INIT)
        message(FATAL_ERROR "Thread library must be supported on the system!")
    endif()
endif()

find_package(Boost "1.62" REQUIRED)

if(NOT Boost_FOUND)
    message( FATAL_ERROR "Boost library must be installed on the system!")
endif()

# --------------------------- Dependant Libraries -----------------------------

# ============================= CMake Settings ================================

# =============================== Google Test =================================

#download_project(
#    PROJ                googletest
#    GIT_REPOSITORY      https://github.com/google/googletest.git
#    GIT_TAG             release-1.8.0
#    ${UPDATE_DISCONNECTED_IF_AVAILABLE}
#)

# Prevent GoogleTest from overriding compiler/linker options when building with
# Visual Studio
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)

#add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR})
# =============================== Google Test =================================

# ================================ GCC FLAGS ==================================
# Note that these compiler options should work for all compilers that support
# the same flag as gcc: so clang, mingw, and cygwin are all valid candidates.
# ------------------------- Global Warning Options ----------------------------
set(GCC_WARN_ALL "-Wall")
set(GCC_WARN_EXTRA "-Wextra")
set(GCC_WARN_PEDANTIC "-Wpedantic")
# ------------------------- Global Warning Options ----------------------------

# ----------------------- Individual Warning Options --------------------------
# Warn whenever a pointer is cast so as to remove a type qualifier from the
# target type.
set(GCC_WARN_POINTER_CAST_QUALIFIER "-Wcast-qual")

# Warn for implicit conversions that may alter a value.
set(GCC_WARN_IMPLICIT_CONVERSION "-Wconversion")

# Warn when a value of type "float" is implicitly promoted to "double".
set(GCC_WARN_DOUBLE_PROMOTION "-Wdouble-promotion")

# Warn if comparison operators are directly used for floats.
set(GCC_WARN_FLOAT_EQUAL_FLAG "-Wfloat-equal")

# Warn if a user-supplied include directory does not exist.
set(GCC_WARN_MISSING_USER_INCLUDE "-Wmissing-include-dirs")

# Warn if pointer arithmetic is performed on pointers to either function or
# void.
set(GCC_WARN_POINTER_ARITH "-Wpointer-arith")

# Warn if local identifers shadow other identifiers outside the scope.
set(GCC_WARN_SHADOW_FLAG "-Wshadow")

# Warn if an automatic variable is used without first being initialized or if a
# variable may be clobbered by a "setjmp" call.
# In C++, warn if a non-static reference or non-static "const" member appears
# in a class without constructors.
set(GCC_WARN_UNINITIALIZED "-Wuninitialized")
# ----------------------- Individual Warning Options --------------------------

# ----------------------------- Output Options --------------------------------
# Use pipes to communicate among different stages of compilation;
# speed up the compilation when GNU Assembler is available.
set(GCC_OUTPUT_PIPE "-pipe")
# ----------------------------- Output Options --------------------------------

# ------------------------- Code Generation Options ---------------------------
# Enable exception handling.
set(GCC_GENERATION_EXCEPTION "-fexceptions")
# Generate assembly trap instructions if signed integer types overflow;
# this would abort the program in most platforms.
set(GCC_GENERATION_SIGNED_OVERFLOW_TRAP "-ftrapv")
# ------------------------- Code Generation Options ---------------------------

# ------------------------- Instrumentation Options ---------------------------
# GCC has built-ins that can help identify common memory-related bugs
set(GCC_SANITIZE_ADDRESS_FLAG "-fsanitize=address")
set(GCC_SANITIZE_LEAK_FLAG "-fsanitize=leak")
set(GCC_SANITIZE_UNDEFINED_FLAG "-fsanitize=undefined")
# ------------------------- Instrumentation Options ---------------------------

# From the cmake documentation: "Adds options to the compiler command line for
# sources in the current directory and below", so it is used rather than
# add_definitions(), which seems to be reserved for macros.
if(UNIX)
    # 15 flags enabled in total.
    add_compile_options(
        ${GCC_WARN_ALL}
        ${GCC_WARN_EXTRA}
        ${GCC_WARN_PEDANTIC}
        ${GCC_WARN_POINTER_CAST_QUALIFIER}
        ${GCC_WARN_IMPLICIT_CONVERSION}
        ${GCC_WARN_DOUBLE_PROMOTION}
        ${GCC_WARN_FLOAT_EQUAL_FLAG}
        ${GCC_WARN_MISSING_USER_INCLUDE}
        ${GCC_WARN_POINTER_ARITH}
        ${GCC_WARN_SHADOW_FLAG}
        ${GCC_WARN_UNINITIALIZED}
        ${GCC_OUTPUT_PIPE}
        ${GCC_GENERATION_EXCEPTION}
        ${GCC_GENERATION_SIGNED_OVERFLOW_TRAP})
        # ${GCC_SANITIZE_ADDRESS_FLAG}
        # ${GCC_SANITIZE_LEAK_FLAG}
        # ${GCC_SANITIZE_UNDEFINED_FLAG}
endif()
# ================================ GCC FLAGS ==================================

# ============================= Source Probing ================================
#                                    NOTE
# This has to be done after the flags for the compiler are set;
# the 'Google Test' section needs to be moved above the compiler flags section
# to make those flags affect only this project.

# Header(s) to be exported reside(s) in the include directory in the
# relative root directory of this project.
include_directories(
    SYSTEM
    ${Boost_INCLUDE_DIRS}
    #"${PROJECT_SOURCE_DIR}/include"
)

foreach(sub_dir "doc" "src")
    add_subdirectory(${sub_dir})
endforeach()
# ============================= Source Probing ================================
